/**
 * 关系树的每个类存放在各自独立的表中,没有主表和子表的概念,每个表都有全部的自身信息,所有表和在一起后，记录仍然是唯一的

union-subclass  为父类和子类单独建表，父子类对应表无关联，父类数据插入父类对应数据表，子类数据插入子类对应数据表， 父子类对应数据表 有连续 自增 主键 
注意 ： 不能使用 identity native , 需要在多张表 完成主键连续自增  ---- 可以使用 sequence 、 increment (max(id)+1)


	1. 采用 union-subclass 元素可以实现将每一个实体对象映射到一个独立的表中。
	2. 子类增加的属性可以有非空约束， 即父类实例的数据保存在父表中，而子类实例的数据保存在子类表中。
	3. 子类实例的数据仅保存在子类表中, 而在父类表中没有任何记录
	4. 在这种映射策略下，子类表的字段会比父类表的映射字段要多,因为子类表的字段等于父类表的字段、加子类增加属性的总和
	5. 在这种映射策略下，既不需要使用鉴别者列，也无须使用 key 元素来映射共有主键.
	6. 使用 union-subclass 映射策略是不可使用 identity 的主键生成策略, 因为同一类继承层次中所有实体类都需要使用同一个主键种子, 即多个持久化实体对应的记录的主键应该是连续的. 受此影响, 也不该使用 native 主键生成策略, 因为 native 会根据数据库来选择使用 identity 或 sequence.

 */
/**
 * @author wangzhf
 *
 */
package com.facingsea.exercise.e_extend.c_union_subclass;